// services/openaiService.js - V3.1 REFACTORIZADO CON TOOLSSERVICE
import 'dotenv/config';
import OpenAI from 'openai';
import { DateTime } from 'luxon';

import CosmosService from './cosmosService.js';
import ToolsService from './toolsService.js';

const cosmosService = new CosmosService();
const toolsService = new ToolsService();

/**
 * AzureOpenAIService - Servicio principal para interacci√≥n con GPT-4
 *
 * Responsabilidades:
 * 1. Gestionar cliente OpenAI (chat completions)
 * 2. Gestionar cliente de embeddings (separado)
 * 3. Procesar mensajes con contexto
 * 4. Coordinar ejecuci√≥n de herramientas v√≠a ToolsService
 *
 * NO maneja:
 * - Definici√≥n de tools ‚Üí ToolsService
 * - Ejecuci√≥n de tools ‚Üí ToolsService
 * - Formateo de resultados ‚Üí ToolsService
 */
export default class AzureOpenAIService {
  constructor() {
    this.initialized = false;
    this.openaiAvailable = false;
    this.embeddingAvailable = false;
    this.embeddingModel = 'text-embedding-3-large';

    // Obtener definiciones de herramientas desde ToolsService
    this.tools = toolsService.getToolDefinitions();

    console.log('ü§ñ Inicializando Azure OpenAI Service...');
    this.initializeAzureOpenAI();
  }

  initializeAzureOpenAI() {
    try {
      const apiKey = process.env.OPENAI_API_KEY;
      const endpoint = process.env.OPENAI_ENDPOINT;
      const deploymentName = 'gpt-4.1-mini';
      const apiVersion = '2025-01-01-preview';

      // Configuraci√≥n para embedding deployment
      const embeddingDeployment = process.env.EMBEDDING_DEPLOYMENT || 'text-embedding-3-large';
      this.embeddingModel = process.env.EMBEDDING_MODEL || 'text-embedding-3-large';

      if (!apiKey || !endpoint) {
        throw new Error('OPENAI_API_KEY y OPENAI_ENDPOINT requeridos');
      }

      // Cliente para completions (chat)
      this.openai = new OpenAI({
        apiKey,
        baseURL: `${endpoint}/openai/deployments/${deploymentName}`,
        defaultQuery: { 'api-version': apiVersion },
        defaultHeaders: {
          'Content-Type': 'application/json',
          'api-key': apiKey
        },
        timeout: 45000
      });

      // Cliente separado para embeddings
      this.embeddingClient = new OpenAI({
        apiKey,
        baseURL: `${endpoint}/openai/deployments/${embeddingDeployment}`,
        defaultQuery: { 'api-version': apiVersion },
        defaultHeaders: {
          'Content-Type': 'application/json',
          'api-key': apiKey
        },
        timeout: 30000
      });

      this.deploymentName = deploymentName;
      this.embeddingDeployment = embeddingDeployment;
      this.openaiAvailable = true;
      this.embeddingAvailable = true;
      this.initialized = true;

      console.log('‚úÖ Azure OpenAI configurado correctamente');
      console.log(`   ‚Ä¢ Modelo de chat: ${deploymentName}`);
      console.log(`   ‚Ä¢ Modelo de embedding: ${embeddingDeployment}`);
      console.log(`   ‚Ä¢ Herramientas disponibles: ${this.tools.length}`);
    } catch (error) {
      console.error('‚ùå Error inicializando Azure OpenAI:', error.message);
      this.openaiAvailable = false;
      this.embeddingAvailable = false;
      this.initialized = false;
    }
  }

  // ========================================
  // M√âTODO PRINCIPAL
  // ========================================

  /**
   * Procesa un mensaje del usuario con contexto completo
   * @param {string} mensaje - Mensaje del usuario
   * @param {Array} historial - Historial de mensajes (fallback)
   * @param {string} userToken - Token JWT del usuario
   * @param {Object} userInfo - Informaci√≥n del usuario
   * @param {string} conversationId - ID de conversaci√≥n (opcional)
   * @param {string} userId - ID del usuario para Cosmos (Teams: "29:xxx", WebChat: token)
   * @returns {Promise<Object>} { type, content, metadata }
   */
  async procesarMensaje(mensaje, historial = [], userToken = null, userInfo = null, conversationId = null, userId = null) {
    try {
      if (!this.openaiAvailable) {
        return {
          type: 'text',
          content: 'Azure OpenAI no est√° disponible. Verifica la configuraci√≥n.'
        };
      }

      // userId para logs (fallback si no se proporciona expl√≠citamente)
      const logUserId = userId || userInfo?.usuario || 'unknown';
      console.log(`üí¨ [${logUserId}] Procesando mensaje: "${mensaje.substring(0, 50)}..."`);

      // Preparar mensajes para OpenAI (pasamos userId expl√≠cito para Cosmos)
      const messages = await this.prepararMensajes(mensaje, historial, userInfo, conversationId, userId);

      // Configuraci√≥n de la petici√≥n
      const requestConfig = {
        model: this.deploymentName,
        messages: messages,
        temperature: 1.0,
        max_completion_tokens: 3000,
        tools: this.tools,
        tool_choice: 'auto'
      };

      // Llamada a OpenAI
      const response = await this.openai.chat.completions.create(requestConfig);
      const messageResponse = response.choices?.[0]?.message;

      if (!messageResponse) {
        throw new Error('Respuesta vac√≠a de Azure OpenAI');
      }

      // Si hay tool_calls, procesarlos
      if (messageResponse.tool_calls) {
        return await this.procesarHerramientas(
          messageResponse,
          messages,
          userToken,
          userInfo,
          conversationId
        );
      }

      // Respuesta directa
      return {
        type: 'text',
        content: messageResponse.content || 'Respuesta vac√≠a',
        metadata: {
          usage: response.usage
        }
      };

    } catch (error) {
      console.error(`‚ùå Error procesando mensaje:`, error);
      return {
        type: 'text',
        content: `Error: ${error.message}`
      };
    }
  }

  // ========================================
  // PREPARACI√ìN DE MENSAJES
  // ========================================

  /**
   * Prepara array de mensajes para OpenAI con contexto completo
   * @param {string} mensaje - Mensaje actual
   * @param {Array} historial - Historial tradicional
   * @param {Object} userInfo - Info del usuario
   * @param {string} conversationId - ID de conversaci√≥n
   * @param {string} userId - ID del usuario para Cosmos (Teams: "29:xxx", WebChat: token)
   * @returns {Promise<Array>} Mensajes en formato OpenAI
   */
  async prepararMensajes(mensaje, historial, userInfo, conversationId, userId) {
    let messages = [];

    // System message con contexto actual
    const fechaActual = DateTime.now().setZone('America/Mexico_City');
    const userContext = userInfo?.nombre
      ? `Usuario: ${userInfo.nombre} (${userInfo.usuario})`
      : 'Usuario no identificado';

    const systemContent = `Tu nombre es Nova-AI, y eres un Asistente virtual inteligente para la instituci√≥n financiera Nova.

CONTEXTO:
‚Ä¢ ${userContext}
‚Ä¢ Fecha/Hora: ${fechaActual.toFormat('dd/MM/yyyy HH:mm:ss')} (${fechaActual.zoneName})

Responde √∫nicamente en espa√±ol. Si te dan las gracias, responde que es un gusto ayudar y si hay algo m√°s en lo que puedas asistirlos. Utiliza el historial de la conversaci√≥n como referencia. Utiliza s√≥lo la informaci√≥n de referencia brindada. No respondas nada fuera de los documentos de referencia. No respondas preguntas que no sean de Nova y sus servicios financieros. Si no conoces la respuesta menciona que no cuentas con esa informaci√≥n. Utiliza de manera preferente la informaci√≥n de referencia con m√°s exactitud y apego a la pregunta. Responde de manera muy concreta y puntual, busca hacer listados y presentar la informaci√≥n de una manera √∫til y accesible.
Utiliza √∫nicamente esta informaci√≥n de referencia para contestar las preguntas del usuario. Se concreto en tus respuestas y amable, busca contestar en pocas palabras. Cada extracto es independiente del anterior y no tienen relaci√≥n.

INSTRUCCIONES:
‚Ä¢ S√© profesional, preciso y √∫til
‚Ä¢ Para informaci√≥n de referencia de todo tipo, usa la herramienta buscar_documentos_nova
‚Ä¢ Para consultas de saldo, usa consultar_saldo_usuario
‚Ä¢ Para tasas de inter√©s, usa consultar_tasas_interes
‚Ä¢ Si no tienes informaci√≥n espec√≠fica, ind√≠calo claramente
‚Ä¢ NO inventes informaci√≥n que no est√© en los documentos
‚Ä¢ Siempre que sean consultas de informaci√≥n usa la herramienta de buscar_documentos_nova

IMPORTANTE - CLARIFICACI√ìN DE INTENCIONES:
‚Ä¢ Si el usuario escribe palabras t√©cnicas sueltas SIN contexto claro, NO asumas su intenci√≥n
‚Ä¢ Palabras t√©cnicas ambiguas: "tasas", "saldo", "documentos", "informaci√≥n", "cuenta", "inter√©s"
‚Ä¢ EXCEPCI√ìN: Saludos y cortes√≠a son naturales: "hola", "gracias", "ok", "adi√≥s", "buenos d√≠as" ‚Üí responde normalmente
‚Ä¢ Cuando detectes ambig√ºedad T√âCNICA, pregunta para clarificar:
  - Ejemplo: Usuario dice "tasas" ‚Üí Pregunta: "¬øTe refieres a las tasas de inter√©s? ¬øDe qu√© a√±o te gustar√≠a consultarlas?"
  - Ejemplo: Usuario dice "saldo" ‚Üí Pregunta: "¬øQuieres consultar tu saldo actual de cuentas?"
  - Ejemplo: Usuario dice "documentos" ‚Üí Pregunta: "¬øQu√© tipo de documentos buscas? ¬øSobre qu√© tema espec√≠fico?"
‚Ä¢ Solo ejecuta herramientas cuando la intenci√≥n sea CLARA:
  - Claro ‚úÖ: "consulta mi saldo", "tasas del 2025", "busca documentos sobre pr√©stamos"
  - Ambiguo ‚ùå: "saldo", "tasas", "documentos"

IMPORTANTE - SIMULACIONES:
‚Ä¢ NUNCA realices c√°lculos ni simulaciones de inversi√≥n, ahorro o rendimientos
‚Ä¢ Si el usuario pide una simulaci√≥n o c√°lculo de rendimientos, usa SIEMPRE la herramienta simulador_ahorros
‚Ä¢ NO intentes hacer matem√°ticas ni proyecciones financieras por tu cuenta
‚Ä¢ Redirige al usuario al simulador oficial del portal web de Nova`;

    messages.push({ role: 'system', content: systemContent });

    // ‚úÖ V3: Historial de Cosmos DB usando user_id expl√≠cito
    // Para Teams: userId = "29:xxx..." (Teams ID)
    // Para WebChat: userId = token JWT completo
    if (cosmosService?.isAvailable?.() && userId) {
      try {
        const mensajesCosmos = await cosmosService.getLastMessages(userId, 10);

        if (mensajesCosmos && mensajesCosmos.length > 0) {
          // Convertir a formato OpenAI
          const mensajesFormato = mensajesCosmos.map(msg => ({
            role: msg.role,
            content: msg.content
          }));
          messages.push(...mensajesFormato);
          console.log(`üìö Historial Cosmos cargado: ${mensajesFormato.length} mensajes (user_id: ${userId.substring(0,8)}...)`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error obteniendo historial Cosmos: ${error.message}`);
      }
    }

    // Historial tradicional como fallback
    if (Array.isArray(historial) && historial.length > 0) {
      const recentHistory = historial.slice(-10);
      recentHistory.forEach(item => {
        if (item?.content?.trim() && item.role) {
          messages.push({
            role: item.role,
            content: item.content.trim()
          });
        }
      });
    }

    // Mensaje actual del usuario
    messages.push({
      role: 'user',
      content: mensaje.trim()
    });

    return messages;
  }

  // ========================================
  // PROCESAMIENTO DE HERRAMIENTAS
  // ========================================

  /**
   * Procesa tool_calls ejecutando herramientas y obteniendo respuesta final
   * @param {Object} messageResponse - Mensaje con tool_calls de OpenAI
   * @param {Array} mensajesPrevios - Mensajes previos del contexto
   * @param {string} userToken - Token JWT
   * @param {Object} userInfo - Info del usuario
   * @param {string} conversationId - ID de conversaci√≥n
   * @returns {Promise<Object>} Respuesta final formateada
   */
  async procesarHerramientas(messageResponse, mensajesPrevios, userToken, userInfo, conversationId) {
    const userId = userInfo?.usuario || 'unknown';
    const resultados = [];

    console.log(`üîß [${userId}] Procesando ${messageResponse.tool_calls.length} herramienta(s)`);

    // Ejecutar cada tool call usando ToolsService
    for (const call of messageResponse.tool_calls) {
      const { function: fnCall, id } = call;
      const { name, arguments: args } = fnCall;

      try {
        console.log(`   ‚öôÔ∏è [${userId}] Ejecutando: ${name}`);
        const parametros = JSON.parse(args || '{}');

        // ‚úÖ Delegar ejecuci√≥n a ToolsService
        const resultado = await toolsService.executeTool(
          name,
          parametros,
          {
            userToken,
            userInfo
          }
        );

        const resultadoString = typeof resultado === 'object' ? JSON.stringify(resultado, null, 2) : String(resultado);

        resultados.push({
          tool_call_id: id,
          content: resultadoString
        });

        console.log(`   ‚úÖ [${userId}] ${name} ejecutado exitosamente`);
        console.log(`   üì§ [${userId}] Resultado enviado a OpenAI (${resultadoString.length} chars):`, resultadoString.substring(0, 300));

      } catch (error) {
        console.error(`   ‚ùå [${userId}] Error ejecutando ${name}:`, error.message);
        resultados.push({
          tool_call_id: id,
          content: `Error ejecutando ${name}: ${error.message}`
        });
      }
    }

    // Construir mensajes finales para OpenAI
    const finalMessages = [
      ...mensajesPrevios,
      messageResponse,
      ...resultados.map(r => ({
        role: 'tool',
        tool_call_id: r.tool_call_id,
        content: r.content
      }))
    ];

    // Llamada final a OpenAI para generar respuesta
    const finalResponse = await this.openai.chat.completions.create({
      model: this.deploymentName,
      messages: finalMessages,
      temperature: 1.0,
      max_completion_tokens: 3500
    });

    const finalContent = finalResponse.choices?.[0]?.message?.content || 'No se pudo generar respuesta final';
    console.log(`ü§ñ [${userId}] Respuesta final de OpenAI (${finalContent.length} chars):`, finalContent.substring(0, 200));

    return {
      type: 'text',
      content: finalContent,
      metadata: {
        toolsUsed: messageResponse.tool_calls.map(tc => tc.function.name),
        usage: finalResponse.usage
      }
    };
  }

  // ========================================
  // INFORMACI√ìN DEL SERVICIO
  // ========================================

  /**
   * Verifica si el servicio est√° disponible
   * @returns {boolean}
   */
  isAvailable() {
    return this.openaiAvailable && this.initialized;
  }
}
