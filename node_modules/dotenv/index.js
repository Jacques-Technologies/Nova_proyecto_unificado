/**
 * Minimal stub for the `dotenv` package.
 *
 * La versión original de este proyecto dependía de `dotenv` para
 * cargar variables de entorno desde un archivo `.env`.  Dado que el
 * entorno de ejecución actual no dispone del paquete instalado y no es
 * posible instalar nuevas dependencias, se proporciona esta
 * implementación simplificada.  Esta función intenta leer un archivo
 * `.env` en el directorio de trabajo actual (o un archivo específico
 * indicado mediante la opción `path`) y establece las variables en
 * `process.env` sin sobrescribir las ya existentes.  Si el archivo no
 * existe o ocurre algún error al leerlo, la función simplemente
 * devuelve un objeto vacío y no lanza ninguna excepción.
 */

function config(options = {}) {
  try {
    const fs = require('fs');
    const path = require('path');
    const envPath = options.path || path.resolve(process.cwd(), '.env');
    if (fs.existsSync(envPath)) {
      const data = fs.readFileSync(envPath, 'utf8');
      data.split(/\r?\n/).forEach((line) => {
        // Ignorar comentarios y líneas vacías
        if (!line || line.trim().startsWith('#')) return;
        const match = line.match(/^\s*([^=\s#]+)\s*=\s*(.*)\s*$/);
        if (match) {
          const key = match[1];
          let value = match[2];
          // Eliminar comillas envolventes si las hay
          if (value.startsWith('"') && value.endsWith('"')) {
            value = value.slice(1, -1);
          }
          if (process.env[key] === undefined) {
            process.env[key] = value;
          }
        }
      });
    }
  } catch (err) {
    // Silenciar cualquier error de lectura/parsing.  Si no se puede
    // cargar el archivo .env, simplemente no se modifican variables.
  }
  return {};
}

module.exports = { config };