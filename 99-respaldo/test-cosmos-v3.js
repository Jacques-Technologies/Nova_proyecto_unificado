// test-cosmos-v3.js - Script de Testing para Cosmos DB v3

import CosmosServiceV3 from './services/cosmosService_v3.js';
import AuthServiceV3 from './services/authService_v3.js';

const cosmosService = new CosmosServiceV3();
const authService = new AuthServiceV3(cosmosService);

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testAll() {
  console.log('üß™ ===== INICIANDO TESTS COSMOS DB V3 =====\n');

  const testUser = 'test_91004';
  const testUserInfo = {
    usuario: 'test_91004',
    nombre: 'Juan Test',
    paterno: 'P√©rez',
    materno: 'Garc√≠a',
    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token'
  };

  let passed = 0;
  let failed = 0;

  try {
    // ========================================
    // TEST 1: Stats iniciales
    // ========================================
    console.log('1Ô∏è‚É£  TEST: Stats del servicio');
    const stats = await authService.getStats();
    console.log('   üìä Cosmos disponible:', stats.cosmosAvailable);
    console.log('   üìä Versi√≥n:', stats.authVersion);
    console.log('   üìä TTL sesi√≥n:', stats.sessionTTL);
    if (stats.cosmosAvailable) {
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - Cosmos no disponible\n');
      failed++;
      return;
    }

    await sleep(500);

    // ========================================
    // TEST 2: Crear sesi√≥n
    // ========================================
    console.log('2Ô∏è‚É£  TEST: Crear sesi√≥n de usuario');
    const created = await authService.setUserAuthenticated(testUser, testUserInfo);
    if (created) {
      console.log('   ‚úÖ PASS - Sesi√≥n creada\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - No se pudo crear sesi√≥n\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 3: Verificar autenticaci√≥n
    // ========================================
    console.log('3Ô∏è‚É£  TEST: Verificar autenticaci√≥n');
    const isAuth = await authService.isUserAuthenticated(testUser);
    if (isAuth) {
      console.log('   ‚úÖ PASS - Usuario autenticado\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - Usuario NO autenticado\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 4: Obtener informaci√≥n de usuario
    // ========================================
    console.log('4Ô∏è‚É£  TEST: Obtener informaci√≥n de usuario');
    const userInfo = await authService.getUserInfo(testUser);
    if (userInfo && userInfo.nombre === testUserInfo.nombre) {
      console.log('   üìù Nombre:', userInfo.nombre);
      console.log('   üìù Usuario:', userInfo.usuario);
      console.log('   üìù Token:', userInfo.token.substring(0, 20) + '...');
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - Info no coincide\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 5: Obtener token
    // ========================================
    console.log('5Ô∏è‚É£  TEST: Obtener token del usuario');
    const token = await authService.getUserToken(testUser);
    if (token && token === testUserInfo.token) {
      console.log('   üîë Token:', token.substring(0, 30) + '...');
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - Token incorrecto\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 6: Guardar mensajes
    // ========================================
    console.log('6Ô∏è‚É£  TEST: Guardar mensajes');
    const messages = [
      { role: 'user', content: '¬øCu√°l es mi saldo?' },
      { role: 'assistant', content: 'Tu saldo actual es $10,000 MXN' },
      { role: 'user', content: '¬øY las tasas de inter√©s?' },
      { role: 'assistant', content: 'Las tasas actuales son: CETES 28 d√≠as: 11.25%' },
      { role: 'user', content: 'Gracias por la informaci√≥n' },
      { role: 'assistant', content: '¬°De nada! ¬øHay algo m√°s en lo que pueda ayudarte?' }
    ];

    let savedCount = 0;
    for (const msg of messages) {
      const saved = await cosmosService.saveMessage(testUser, msg.role, msg.content);
      if (saved) savedCount++;
    }

    if (savedCount === messages.length) {
      console.log(`   üíæ Guardados ${savedCount}/${messages.length} mensajes`);
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log(`   ‚ùå FAIL - Solo ${savedCount}/${messages.length} guardados\n`);
      failed++;
    }

    await sleep(1000);

    // ========================================
    // TEST 7: Obtener √∫ltimos mensajes
    // ========================================
    console.log('7Ô∏è‚É£  TEST: Obtener √∫ltimos mensajes');
    const retrievedMessages = await cosmosService.getLastMessages(testUser, 10);
    if (retrievedMessages.length > 0) {
      console.log(`   üìö Total mensajes: ${retrievedMessages.length}`);
      retrievedMessages.forEach((m, i) => {
        const preview = m.content.substring(0, 40);
        console.log(`   ${i + 1}. [${m.role}] ${preview}...`);
      });
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - No se obtuvieron mensajes\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 8: Obtener mensajes por rol
    // ========================================
    console.log('8Ô∏è‚É£  TEST: Obtener mensajes por rol');
    const { userMessages, assistantMessages } = await cosmosService.getLastMessagesByRole(testUser);
    console.log(`   üë§ Mensajes usuario: ${userMessages.length}`);
    console.log(`   ü§ñ Mensajes asistente: ${assistantMessages.length}`);
    if (userMessages.length > 0 && assistantMessages.length > 0) {
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - Mensajes por rol incorrectos\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 9: Renovar TTL
    // ========================================
    console.log('9Ô∏è‚É£  TEST: Renovar TTL de sesi√≥n');
    const renewed = await cosmosService.renewUserTTL(testUser);
    if (renewed) {
      console.log('   üîÑ TTL renovado a 60min');
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - No se pudo renovar TTL\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 10: Obtener datos completos
    // ========================================
    console.log('üîü TEST: Obtener datos completos del usuario');
    const userData = await cosmosService.getUserData(testUser);
    if (userData.session && userData.messages.length > 0) {
      console.log(`   üë§ Sesi√≥n: ${userData.session.nombre}`);
      console.log(`   üí¨ Mensajes: ${userData.messages.length}`);
      console.log(`   ‚è∞ Login: ${userData.session.loginAt}`);
      console.log(`   üïê √öltima actividad: ${userData.session.lastActivity}`);
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - Datos incompletos\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 11: Limpiar mensajes
    // ========================================
    console.log('1Ô∏è‚É£1Ô∏è‚É£ TEST: Limpiar mensajes del usuario');
    const deletedMessages = await cosmosService.clearUserMessages(testUser);
    console.log(`   üóëÔ∏è  Mensajes eliminados: ${deletedMessages}`);
    if (deletedMessages > 0) {
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - No se eliminaron mensajes\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 12: Verificar mensajes eliminados
    // ========================================
    console.log('1Ô∏è‚É£2Ô∏è‚É£ TEST: Verificar que mensajes fueron eliminados');
    const afterClear = await cosmosService.getLastMessages(testUser, 10);
    if (afterClear.length === 0) {
      console.log('   üì≠ No hay mensajes (correcto)');
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log(`   ‚ùå FAIL - A√∫n hay ${afterClear.length} mensajes\n`);
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 13: Logout
    // ========================================
    console.log('1Ô∏è‚É£3Ô∏è‚É£ TEST: Cerrar sesi√≥n (logout)');
    const loggedOut = await authService.clearUserAuthentication(testUser);
    if (loggedOut) {
      console.log('   üö™ Sesi√≥n cerrada');
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - No se pudo cerrar sesi√≥n\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 14: Verificar logout
    // ========================================
    console.log('1Ô∏è‚É£4Ô∏è‚É£ TEST: Verificar que sesi√≥n fue cerrada');
    const isAuthAfter = await authService.isUserAuthenticated(testUser);
    if (!isAuthAfter) {
      console.log('   üîí Usuario NO autenticado (correcto)');
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - Usuario a√∫n autenticado\n');
      failed++;
    }

    await sleep(500);

    // ========================================
    // TEST 15: Comando logout
    // ========================================
    console.log('1Ô∏è‚É£5Ô∏è‚É£ TEST: Detectar comando de logout');
    const commands = ['logout', 'cerrar sesion', 'salir', 'LOGOUT'];
    let allDetected = true;
    commands.forEach(cmd => {
      const detected = authService.isLogoutCommand(cmd);
      console.log(`   "${cmd}" ‚Üí ${detected ? '‚úÖ' : '‚ùå'}`);
      if (!detected) allDetected = false;
    });

    if (allDetected) {
      console.log('   ‚úÖ PASS\n');
      passed++;
    } else {
      console.log('   ‚ùå FAIL - Algunos comandos no detectados\n');
      failed++;
    }

  } catch (error) {
    console.error('\n‚ùå ERROR CR√çTICO EN TESTS:', error);
    console.error('Stack:', error.stack);
    failed++;
  }

  // ========================================
  // RESUMEN
  // ========================================
  console.log('\n' + '='.repeat(50));
  console.log('üìä RESUMEN DE TESTS');
  console.log('='.repeat(50));
  console.log(`‚úÖ Tests exitosos: ${passed}`);
  console.log(`‚ùå Tests fallidos: ${failed}`);
  console.log(`üìä Total: ${passed + failed}`);
  console.log(`üìà Tasa de √©xito: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);
  console.log('='.repeat(50));

  if (failed === 0) {
    console.log('\nüéâ ¬°TODOS LOS TESTS PASARON!\n');
    process.exit(0);
  } else {
    console.log('\n‚ö†Ô∏è  ALGUNOS TESTS FALLARON - Revisar errores arriba\n');
    process.exit(1);
  }
}

// Ejecutar tests
testAll().catch(error => {
  console.error('üí• Error fatal:', error);
  process.exit(1);
});
